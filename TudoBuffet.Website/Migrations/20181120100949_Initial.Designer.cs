// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TudoBuffet.Website.Repositories.Context;

namespace TudoBuffet.Website.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20181120100949_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TudoBuffet.Website.Entities.Buffet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveUntil");

                    b.Property<DateTime?>("ActivedAt");

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CelPhone")
                        .HasMaxLength(256);

                    b.Property<string>("City")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Facebook")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<Guid?>("OwnerId");

                    b.Property<Guid?>("PlanSelectedId");

                    b.Property<int>("PriceRange");

                    b.Property<string>("State")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanSelectedId");

                    b.ToTable("Buffets");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.EmailValidation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ExpireAt");

                    b.Property<string>("Token")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<DateTime?>("ValidateAt");

                    b.Property<bool>("WasValidate");

                    b.HasKey("Id");

                    b.ToTable("EmailsValidation");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BuffetId");

                    b.Property<DateTime>("CreateAt");

                    b.Property<bool>("IsMainPhoto");

                    b.Property<string>("Path")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("BuffetId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateAt");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<int>("Order");

                    b.Property<decimal>("Price");

                    b.Property<int>("QuantityDaysActive");

                    b.Property<int>("QuantityPhotosAllowed");

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActivedAt");

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256);

                    b.Property<string>("Salt")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Buffet", b =>
                {
                    b.HasOne("TudoBuffet.Website.Entities.User", "Owner")
                        .WithMany("Buffets")
                        .HasForeignKey("OwnerId");

                    b.HasOne("TudoBuffet.Website.Entities.Plan", "PlanSelected")
                        .WithMany()
                        .HasForeignKey("PlanSelectedId");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Photo", b =>
                {
                    b.HasOne("TudoBuffet.Website.Entities.Buffet", "Buffet")
                        .WithMany("Photos")
                        .HasForeignKey("BuffetId");
                });
#pragma warning restore 612, 618
        }
    }
}
