// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TudoBuffet.Website.Repositories.Context;

namespace TudoBuffet.Website.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20181211010435_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TudoBuffet.Website.Entities.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DayParty");

                    b.Property<string>("EmailSender")
                        .HasMaxLength(256);

                    b.Property<string>("Observation")
                        .HasMaxLength(256);

                    b.Property<int>("QuantityPartyGuests");

                    b.HasKey("Id");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Buffet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActivedAt");

                    b.Property<Guid?>("BudgetId");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Cellphone")
                        .HasMaxLength(256);

                    b.Property<string>("City")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("District")
                        .HasMaxLength(256);

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Facebook")
                        .HasMaxLength(256);

                    b.Property<string>("Instagram")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<int?>("Number");

                    b.Property<Guid?>("OwnerId");

                    b.Property<Guid?>("PlanSelectedId");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("State")
                        .HasMaxLength(256);

                    b.Property<string>("Street")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanSelectedId");

                    b.ToTable("Buffets");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.EmailValidation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ExpireAt");

                    b.Property<string>("Token")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<DateTime?>("ValidateAt");

                    b.Property<bool>("WasValidate");

                    b.HasKey("Id");

                    b.ToTable("EmailsValidation");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BuffetId");

                    b.Property<string>("ContainerName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("DetailFileName")
                        .HasMaxLength(256);

                    b.Property<string>("DetailUrl")
                        .HasMaxLength(256);

                    b.Property<string>("SearachUrl")
                        .HasMaxLength(256);

                    b.Property<string>("SearchFileName")
                        .HasMaxLength(256);

                    b.Property<long>("Size");

                    b.Property<string>("ThumbnailFileName")
                        .HasMaxLength(256);

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(256);

                    b.Property<string>("Type")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("BuffetId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<int>("Order");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.ToTable("Plans");

                    b.HasData(
                        new { Id = new Guid("68dc7964-0385-4bee-95a4-17e23f00c57a"), CreateAt = new DateTime(2018, 12, 10, 23, 4, 34, 252, DateTimeKind.Local), Description = "O plano ouro favorece o aparecimento em mais vezes nas pesquisas e irá aparecer com mais frequencia no destaques do dia", Image = "img/planouro.jpg", IsActive = true, Name = "Plano ouro", Order = 1, Price = 30.00m },
                        new { Id = new Guid("58878d10-dd49-4422-bd0c-0eca5f33dffe"), CreateAt = new DateTime(2018, 12, 10, 23, 4, 34, 260, DateTimeKind.Local), Description = "O plano prata está a frente do plano bronze e também irá aparecer nas pesquisa com uma boa frequencia e também estará presente nos destaques do dia", Image = "img/planprata.jpg", IsActive = true, Name = "Plano prata", Order = 2, Price = 20.00m },
                        new { Id = new Guid("6d9c516c-4d8c-451c-a8df-ef7f5dd8c83d"), CreateAt = new DateTime(2018, 12, 10, 23, 4, 34, 260, DateTimeKind.Local), Description = "O plano bronze irá aparecer nas pesquisas, mas com menos frequencia na primeira página", Image = "img/planbronze.jpg", IsActive = true, Name = "Plano bronze", Order = 3, Price = 10.00m }
                    );
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActivedAt");

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256);

                    b.Property<int>("Profile");

                    b.Property<string>("Salt")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Buffet", b =>
                {
                    b.HasOne("TudoBuffet.Website.Entities.Budget")
                        .WithMany("BuffetsSelected")
                        .HasForeignKey("BudgetId");

                    b.HasOne("TudoBuffet.Website.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("TudoBuffet.Website.Entities.Plan", "PlanSelected")
                        .WithMany()
                        .HasForeignKey("PlanSelectedId");
                });

            modelBuilder.Entity("TudoBuffet.Website.Entities.Photo", b =>
                {
                    b.HasOne("TudoBuffet.Website.Entities.Buffet", "Buffet")
                        .WithMany("Photos")
                        .HasForeignKey("BuffetId");
                });
#pragma warning restore 612, 618
        }
    }
}
